plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlinx-serialization'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}


def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {


    compileSdk 32

    defaultConfig {
        applicationId "com.fcmb.sampletestingappwithcicd"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // should correspond to key/value pairs inside the file
        buildConfigField("String", "CONSUMER_KEY", apikeyProperties['CONSUMER_KEY'])
        buildConfigField("String", "CONSUMER_SECRET", apikeyProperties['CONSUMER_SECRET'])

    }

    externalNativeBuild{
        ndkBuild {
            path '/Users/tmoor/AndroidStudioProjects/SampleTestingAppwithCICD/app/src/main/java/com/fcmb/sampletestingappwithcicd/jni/Android.mk'//path of Android.mk file
        }
    }


    testOptions {
        animationsDisabled true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests{
            includeAndroidResources = true
        }
//        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true   // Obfuscate and minify codes
            shrinkResources true // Remove unused resources
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

tasks.getByPath("preBuild").dependsOn("ktlintFormat")

ktlint{
    android = true
    ignoreFailures = false
    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "sarif"
    }
}
jacoco{
    toolVersion = "$jacocoVersion"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    //daggar hilt
    implementation 'com.google.dagger:hilt-android:2.44'
    kapt 'com.google.dagger:hilt-compiler:2.44'
    implementation 'androidx.annotation:annotation:1.5.0'



    //KotlinX Serializer
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    //Glide image
    implementation 'com.github.bumptech.glide:glide:4.13.0'
    kapt 'com.github.bumptech.glide:compiler:4.13.0'

    //Testing
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.10.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "io.mockk:mockk:1.13.2"


    // Mockwebserver
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"

    // okhttp3-idling-resource and other test resources
    androidTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
}